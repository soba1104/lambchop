#!/usr/bin/env ruby

require 'erb'

def indent_stmt(stmt, indent)
  stmt.lines.map{|l| (' ' * indent) + l}.join()
end

def fetch_rex_stmt(ipreg, dst, indent)
  indent_stmt(<<-EOS, indent)
{
  uint8_t *__p = (uint8_t*)#{ipreg};
  uint8_t __v = *__p;
  if (IS_REX(__v)) {
    #{ipreg}++;
    #{dst} = __v;
  }
}
  EOS
end

template = ERB.new(<<-EOS, 0, '%-')
#include "lambchop.h"

#include <stdint.h>
#include <stdlib.h>

#include <assert.h>

#define IS_REX(v) (((v) & 0xf0) == 0x40)

int vm_main(void *func, uint64_t stacksize, lambchop_logger *logger)
{
  uint64_t rip;
  uint64_t rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi;
  uint64_t r8, r9, r10, r11, r12, r13, r14, r15;
  uint8_t rex, modrm;
  void *stack = malloc(stacksize);

  assert(stack); // TODO: return error
  rip = (uint64_t)func;
  rbp = (uint64_t)stack;
  rsp = (uint64_t)stack;

  while (true) {
<% indent = 4 -%>
<%= fetch_rex_stmt('rip', 'rex', indent) -%>
  }

  if (stack) {
    free(stack);
  }

  return 0;
}
EOS
puts template.result(binding)
